---
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E3008
        - E1029
Parameters:
  VpcCIDR:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.0.0/16
    Description: The CIDR block for the VPC
  PrivateSubnetCIDR1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.1.0/24
    Description: The CIDR block for the private subnet in first AZ
  PrivateSubnetCIDR2:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.2.0/24
    Description: The CIDR block for the private subnet in second AZ
  PublicSubnetCIDR1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.10.0/24
    Description: The CIDR block for the public subnet in first AZ
  PublicSubnetCIDR2:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.11.0/24
    Description: The CIDR block for the public subnet in second AZ
  AvailabilityZone1:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZone2:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  ConjurImage:
    Type: String
    Default: 'cyberark/conjur:edge'
    Description: The Conjur Docker image
  DomainName:
    Type: String
  SubDomain:
    Type: String
    Default: myservice
  HostedZoneId:
    Type: String
    Description: The HostedZoneId of the DomainName provided
  ConjurAdminPasswordARN:
    Type: String
    Description: >-
      Amazon Resource Name of an Secrets Manager secret.
      This secret will be used to set the Conjur admin user's password.
      Note that the console stores ASM secrets as JSON by default, but this
      value should refer to a non-JSON raw string secret.
    AllowedPattern: "^arn:aws:secretsmanager:.*"
  MinContainers:
    Type: Number
    Default: 2
    MinValue: 1
    Description: Min Conjur instances in cluster
  MaxContainers:
    Type: Number
    Default: 10
    MinValue: 1
    Description: Max Conjur instances in cluster
  AutoScalingTargetValue:
    Type: Number
    Default: 50
    Description: Target value for metric specified in AutoScalingMetric
  AutoScalingMetric:
    Type: String
    Default: ECSServiceAverageCPUUtilization
    Description: Metric to track when scaling containers up/down
    AllowedValues:
      - ECSServiceAverageCPUUtilization
      - ECSServiceAverageMemoryUtilization
      - ALBRequestCountPerTarget
  PumaThreads:
    Type: Number
    Default: 5
    MinValue: 1
    Description: Number of threads per puma process
  ContainerProcesses:
    Type: Number
    Default: 50
    MinValue: 1
    Description: Number of puma processes per container
  ContainerCPU:
    Type: Number
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
    Default: 4096
    Description: |
      CPU units to allocate to each container.
      See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html
      for valid CPU  & Memory combinations.
  ContainerMemory:
    Type: Number
    Default: 8192
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
    Description: Memory units to allocate to each container

Resources:
  ConjurDataKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Conjur Data Key
      Name: !Sub '${AWS::StackName}-conjur_key'
      GenerateSecretString:
        ExcludePunctuation: true
  # ConjurAdminPassword:
  #   Type: 'AWS::SecretsManager::Secret'
  #   Properties:
  #     Description: Conjur Admin User Password
  #     Name: conjur_key
  #     GenerateSecretString:
  #       PasswordLength: 120
  #       RequireEachIncludedType: true
  ConjurDBPassword:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Conjur DB Password
      Name: !Sub '${AWS::StackName}-ConjurDBPassword'
      GenerateSecretString:
        PasswordLength: 12
        ExcludePunctuation: true
  PostgresSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub '${AWS::StackName} Enable access from Conjur'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ContainerSecurityGroup
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}--ContainerSecurityGroup'
      GroupDescription: Security group for NGINX container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt
            - LoadBalancerSecurityGroup
            - GroupId
      VpcId: !Ref VpcId
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}- - Security group for LB'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AWS::StackName}-conjur-cluster'
  Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-conjur-fargate-role'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource:
              - !Ref ConjurAdminPasswordARN
              - !Ref ConjurDBPassword
              - !Ref ConjurDataKey
      Roles:
        - !Ref FargateExecutionRole
  FargateExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-conjur-fargate-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  AutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-service-auto-scaling-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-service-auto-scaling-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:DeleteAlarms'
                Resource:
                  - '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      RoleARN: !GetAtt
        - AutoScalingRole
        - Arn
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt
            - Service
            - Name
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
  ScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-conjur-auto-scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: !Ref AutoScalingMetric
        TargetValue: !Ref AutoScalingTargetValue
        ScaleInCooldown: 5
        ScaleOutCooldown: 30
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: conjur-deployment-task
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref FargateExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ConjurContainer'
          Image: !Ref ConjurImage
          EntryPoint:
            - /bin/bash
            - '-c'
          Command:
            - >-
                set +o history;
                history -c;
                export CONJUR_DATA_KEY=$( echo -n $CONJUR_KEY | base64);
                export DATABASE_URL="postgres://conjur:${ConjurDBPassword}@${DBEndpoint}:${DBPort}/postgres";
                mkdir -p /puma;
                openssl req -x509 -newkey rsa:4096 -keyout /puma/key.pem -out /puma/cert.pem -days 365 -subj "/CN=localhost" -nodes;
                conjurctl server --port 443 --bind "ssl://0.0.0.0:443?key=/puma/key.pem\&cert=/puma/cert.pem" &
                echo "conjurctl wait doesn't support ssl :( so use curl in a loop";
                until curl -k https://localhost/ |grep -i "your conjur server is running"; do echo "Waiting for conjur to come up"; sleep 1; done;
                AdminApiKey="$(conjurctl account create conjur | awk -F': ' '/^API/{print $2}')";
                curl -k --request PUT --data "${ConjurAdminPassword}" --user "admin:${AdminApiKey}" https://localhost/authn/conjur/password;
                sleep infinity
          PortMappings:
            - ContainerPort: 443
              HostPort: 443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DBEndpoint
              Value: !GetAtt
                - ConjurDB
                - Endpoint.Address
            - Name: DBPort
              Value: !GetAtt
                - ConjurDB
                - Endpoint.Port
            - Name: RAILS_ENV
              Value: production
            - Name: TRUSTED_PROXIES
              Value: !Sub '${PublicSubnetCIDR1},${PublicSubnetCIDR2}'
            - Name: WEB_CONCURRENCY
              Value: !Ref ContainerProcesses
            - Name: RAILS_MAX_THREADS
              Value: !Ref PumaThreads
          Secrets:
            - Name: CONJUR_KEY
              ValueFrom: !Ref ConjurDataKey
            - Name: ConjurDBPassword
              ValueFrom: !Ref ConjurDBPassword
            - Name: ConjurAdminPassword
              ValueFrom: !Ref ConjurAdminPasswordARN
      RequiresCompatibilities:
        - FARGATE
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - Listener
      - Policy
    Properties:
      ServiceName: !Sub '${AWS::StackName}-conjur-service'
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref MinContainers
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ConjurContainer'
          ContainerPort: 443
          TargetGroupArn: !Ref TargetGroup
  VpcId:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VpcId
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR1
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR2
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone2
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Postgres subnet
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NatGateway2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Routes (AZ1)'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Routes (AZ2)'
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      TargetType: ip
      Name: !Sub '${AWS::StackName}-ConjurTG'
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref 'AWS::StackName'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt
          - LoadBalancer
          - DNSName
        HostedZoneId: !GetAtt
          - LoadBalancer
          - CanonicalHostedZoneID
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub '${SubDomain}.${DomainName}'
      Type: A
  Certificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
  LoadBalancerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref Listener
      Priority: 1
  ConjurDB:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBName: !Ref 'AWS::StackName'
      Engine: postgres
      EngineVersion: "10.15"
      AllocatedStorage: "20"
      StorageType: gp2
      DBInstanceClass: db.t3.medium
      MasterUsername: conjur
      MasterUserPassword: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref ConjurDBPassword
          - '}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup
      BackupRetentionPeriod: 14
      AutoMinorVersionUpgrade: false
      DeleteAutomatedBackups: false
      MultiAZ: true
      EnablePerformanceInsights: true
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-conjur-log-group'
      RetentionInDays: 90
