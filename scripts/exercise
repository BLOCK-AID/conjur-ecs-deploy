#!/usr/bin/env bash

set -euo pipefail

# Vars
SCRIPTS_DIR="$(dirname "${BASH_SOURCE[0]}")"
. "${SCRIPTS_DIR}/../bash-lib/init"
set -x # After bash-lib init
TEST_VAR="TestPolicy/TestVariable"
TEST_VAR_VALUE_1="$(uuidgen)"
TEST_VAR_VALUE_2="$(uuidgen)"
BASE_URL="https://${STACK_NAME}.${DOMAIN_NAME}"
AB_REQUESTS="500"

# Relative because it will be used within docker
TEST_POLICY_FILE="scripts/test_policy.yml"

# Main flow

export LOG_GROUP="${STACK_NAME}-conjur-log-group"
"${SCRIPTS_DIR}"/tail_ecs_logs &
LOG_TAIL_PID="${!}"
trap 'kill -9 ${LOG_TAIL_PID} || true' EXIT

. "${SCRIPTS_DIR}/conjur_login"

# Load Policy
if dconjur list variables |grep -q "${TEST_VAR}"; then
  echo "Policy already loaded, skipping policy load"
else
 dconjur policy load root "${TEST_POLICY_FILE}"
  echo "Test Policy Loaded"
fi

# Ensure Variable defined by policy is available
if dconjur list variables |grep "${TEST_VAR}"; then
  echo "Verified that variable ${TEST_VAR} exists"
else
  bl_die "${TEST_VAR} not found after policy load"
fi

# Set variable value and read it back
dconjur variable values add "${TEST_VAR}" "${TEST_VAR_VALUE_1}"
check_variable_value "${TEST_VAR}" "${TEST_VAR_VALUE_1}"

# Update vairable to a new value and read it back
dconjur variable values add "${TEST_VAR}" "${TEST_VAR_VALUE_2}"
check_variable_value "${TEST_VAR}" "${TEST_VAR_VALUE_2}"

echo "Starting Reliability Tests"

# kill the log tailer before reliability testing to avoid hitting
# log api rate limits
kill "${LOG_TAIL_PID}" || true
echo "Checking that ECS log tailer process has stopped:"
ps "${LOG_TAIL_PID}" || true

# Build apache bench container
docker build -f "${SCRIPTS_DIR}/Dockerfile.ab" -t ab "${SCRIPTS_DIR}"
ab(){
  concurrency="${1}"
  name="${2}"
  shift; shift
  log="ab_${concurrency}_${name}.log"
  docker run\
    --rm \
    --volume "${PWD}:${PWD}" \
    --workdir "${PWD}" \
    ab \
    -l \
    -n "${AB_REQUESTS}" \
    -c "${concurrency}" \
    "${@}" \
    | tee "${log}"
  grep '^Failed requests:\s*0' "${log}"
  ! grep '^Non-2xx responses:' "${log}"
}

echo "Testing serial requests to root url"
ab 1 root "${BASE_URL}/"

echo "Testing parallel requests to root url"
ab 2 root "${BASE_URL}/"

echo "Testing serial variable reads"
ab 1 "read" -H "$(dconjur authn authenticate -H)" "${BASE_URL}/secrets/conjur/variable/${TEST_VAR}"

echo "Testing parallel variable reads"
ab 2 "read" -H "$(dconjur authn authenticate -H)" "${BASE_URL}/secrets/conjur/variable/${TEST_VAR}"

echo "Testing serial write"
date > postfile
ab 1 write -H "$(dconjur authn authenticate -H)" -p postfile "${BASE_URL}/secrets/conjur/variable/${TEST_VAR}"

echo "Testing parallel write"
AB_REQUESTS="25"
ab 2 write -H "$(dconjur authn authenticate -H)" -p postfile "${BASE_URL}/secrets/conjur/variable/${TEST_VAR}"

echo "Exercise Complete"
